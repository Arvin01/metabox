% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetchHetNetwork.R
\name{fetchHetNetwork}
\alias{fetchHetNetwork}
\title{Query the heterogeneous networks of several relationship types from the graph database}
\usage{
fetchHetNetwork(from, to, pattern, returnas)
}
\arguments{
\item{from}{a character vector of source nodes used for the query e.g. from = c('id1', 'id2').
The value must be neo4j ids, see \code{\link{convertId}} for how to convert to neo4j ids.}

\item{to}{a character vector of target nodes used for the query e.g. to = c('id1', 'id2').
The value must be neo4j ids, see \code{\link{convertId}} for how to convert to neo4j ids.}

\item{pattern}{a string specifying the relationship pattern used for the query.

Naming a node as \code{from} is to specify the source node used for the query \code{(from:Nodetype)}.
Naming a node as \code{to} is to specify the target node used for the query \code{(to:Nodetype)}.
None specific nodes are described by a pair of parentheses \code{(:Nodetype)}.

To describe a relationship type, you can specify with a pair of square brackets and the arrow as \code{-[:RELATIONSHIP_TYPE]->}}

\item{returnas}{a string specifying output type. It can be one of dataframe, list, json. Default is dataframe.}
}
\value{
list of nodes with the following components:

\code{id} = node internal neo4j id

\code{gid} = node grinn id

\code{nodename} = node name

\code{nodelabel} = node type

\code{nodexref} = node cross references

list of edges with the following components:

\code{source, target} = node internal neo4j id

\code{type} = relationship type

\code{datasource} = relationship resource

\code{properties} = relationship properties

Return empty list or data frame if error or found nothing.
}
\description{
query the networks for the given source and/or target nodes and relationship pattern
see \url{http://grinnhomepage} for the database structure to construct the network query.
}
\details{
The function queries for the heterogeneous network containing the given relationship pattern between the source nodes and/or target nodes based on the database structure.
This function can query for the ralationship of length > 1. Use \code{\link{fetchNetwork}} to query for a network of length = 1.
}
\examples{
# Query the network of protein-CONTROL-gene-CONVERSION-protein-CATALYSIS-compound
#from = list('30777','30741','28116')
#to = c("343","285","255")
#pattern = "(from:Protein)-[:CONTROL]->(to:Gene)-[:CONVERSION]->(:Protein)-[:CATALYSIS]->(:Compound)"
#result = fetchHetNetwork(from, to, pattern)
#library(igraph)
#plot(graph.data.frame(result[,c(1,4)], directed=FALSE))
#from = c('2','5')
#to = '4'
#pattern = "(from:Protein)-[:MOLECULAR_BINDING]->(to:Protein)"
#result = fetchHetNetwork(from, to, pattern)
#from = list('30777','30741','28116')
#to = c("343","285","255")
#pattern = "(from:Protein)-[:CONTROL]->(to:Gene)"
#result = fetchHetNetwork(from, to, pattern)
}
\author{
Kwanjeera W \email{kwanich@ucdavis.edu}
}
\seealso{
\code{\link{convertId}}, \code{\link{fetchNetwork}}, \url{http://grinnhomepage}
}


% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetchNetworkByGID.R
\name{fetchNetworkByGID}
\alias{fetchNetworkByGID}
\title{Query networks of a specific relationship from the database}
\usage{
fetchNetworkByGID(from, to, fromtype, totype, reltype, returnas)
}
\arguments{
\item{from}{a character vector of start nodes e.g. from = c('id1', 'id2'). Given \code{from} = NULL, will result in all possible start nodes.
Otherwise the value must be a grinn id, see details and see \code{\link{convertId}} for how to convert ids.}

\item{to}{a character vector of end nodes e.g. to = c('id1', 'id2'). Given \code{to} = NULL, will result in all possible end nodes, see \code{from} for details.}

\item{fromtype}{a string specifying the type of the start node. It can be one of compound, protein, gene, pathway, rna, dna, phenotype. The node types correspond to node labels of the database.}

\item{totype}{a string specifying the type of end nodes, see \code{fromtype} for details.}

\item{reltype}{a string specifying a relationship type.
It can be one of annotation, biochemical_reaction, catalysis, control, conversion, genetic_association, molecular_binding.}

\item{returnas}{a string specifying output type. It can be one of dataframe, list, json. Default is dataframe.}
}
\value{
list of network information with the following components:

nodes:

\code{id} = node neo4j id

\code{gid} = node grinn id

\code{nodename} = node name

\code{nodelabel} = node type

\code{nodexref} = node cross references

edges:

\code{source, target} = node neo4j id

\code{type} = relationship type

\code{datasource} = relationship resource

\code{properties} = relationship properties

Return empty list if error or found nothing.
}
\description{
query networks containing a specific relationship type between the given \code{from} and/or \code{to} nodes using grinn id (gid), see details.
}
\details{
The function is specifically used to query one type of relationship. Use \code{\link{fetchHetNetworkByGID}} to query networks containing one or more relationship types (heterogeneous network).

The database uses two id systems. The neo4j id is a numeric, internal id automatically generated by the database system.
The grinn id (gid) is an id system of Grinn database that uses main ids of standard resources
i.e. ENSEMBL for genes (e.g.ENSG00000139618), UniProt for proteins (e.g.P0C9J6), PubChem CID for compounds (e.g.5793), KEGG for pathways (e.g.hsa00010).
}
\examples{
# Query the network of (from:Compound)-BIOCHEMICAL_REACTION->(to:Compound)
#from = list('1060','284','760') #By default, PubChem ids can be used as grinn ids for compounds
#to = list('222656','107689','5950','71080') #By default, PubChem ids can be used as grinn ids for compounds
#result = fetchNetworkByGID(from=from, to=to, fromtype="compound", totype="compound", reltype="biochemical_reaction")
# Query the network of (:Protein)-CATALYSIS->(to:Compound)
#to = c('222656','107689','5950','71080') #By default, PubChem ids can be used as grinn ids for compounds
#result = fetchNetworkByGID(from=NULL, to=to, fromtype="protein", totype="compound", reltype="catalysis")
}
\author{
Kwanjeera W \email{kwanich@ucdavis.edu}
}
\seealso{
\code{\link{convertId}}, \code{\link{fetchHetNetworkByGID}}

For database structure see \url{http://grinnhomepage}
}


% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convertId.R
\name{convertId}
\alias{convertId}
\title{Convert id(s)}
\usage{
convertId(x, nodetype, searchby, exactmatch, returnas)
}
\arguments{
\item{x}{a character vector or dataframe of keywords used for the mapping e.g. x = c('name1', 'name2'), see below for details.
The value can be a kind of node property keys, see \code{searchby}. Default is xref}

\item{nodetype}{a string specifying the type of a query node. It can be one of compound, protein, gene, pathway, rna, dna, biofeature.}

\item{searchby}{a string specifying a node property key used for the query. It can be one of name, synonyms, description, properties, xref. Default is xref.}

\item{exactmatch}{logical. If TRUE, it will query for exact results i.e. a case-sensitive and exact keyword or phrase. Default is TRUE.}

\item{returnas}{a string specifying output type. It can be one of dataframe, list, json. Default is dataframe.}
}
\value{
pair of input and the match internal Neo4j id and grinn id. Return empty list or data frame if error.
}
\description{
convert to internal neo4j id(s) and grinn id(s).
}
\details{
If \code{x} is a character vector, the results include the input, the internal neo4j id and grinn id.

\code{x} can be a dataframe containing other data e.g. stat values. First column must be the keywords for the mapping.
The results will include the input, the internal neo4j id, grinn id and the rest of the dataframe.

Unmapped keywords are also returned.
}
\examples{
# Convert gene names
#kw <- list('MT-TF','MT-TQ','MT-TI','MT-ND2','MT-ND3')
#result <- convertId(x=kw, nodetype="gene", searchby="name")
# Convert KEGG ids
#kw <- c('hsa:4514','hsa:4535')
#result <- convertId(x=kw, nodetype="gene", searchby="xref")
# Convert description
#kw <- '6-phosphogluconolactonase'
#result <- convertId(x=kw, nodetype="protein", searchby="description", exactmatch=FALSE)
}
\author{
Kwanjeera W \email{kwanich@ucdavis.edu}
}

